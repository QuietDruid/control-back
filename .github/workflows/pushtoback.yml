name: Django Deployment Workflow

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: self-hosted
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Install dependencies
      run: |
        if [ ! -d "venv" ]; then
          python3 -m venv venv
        fi
        
        # Activate virtual environment and install dependencies
        source venv/bin/activate

        python3 -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run linting
      run: |
        # pip install flake8
        # flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Run tests
      run: |
        source venv/bin/activate
        python3 controlbackend/manage.py test
    
    - name: Security checks
      run: |
        # pip install bandit
        bandit -r . -f custom
    
    - name: Deploy to Production Server
      env:
        SERVER_HOST: ${{ secrets.SERVER_HOST }}
        SERVER_USER: ${{ secrets.SERVER_USER }}
      run: |
        # Create project directory if it doesn't exist
        ssh $SERVER_USER@$SERVER_HOST "mkdir -p /var/www/djangoproject"
        
        # Backup existing project (optional but recommended)
        ssh $SERVER_USER@$SERVER_HOST "cp -r /var/www/djangoproject /var/www/djangoproject_backup_$(date +%Y%m%d_%H%M%S)"
        
        # Remove existing project files
        # ssh $SERVER_USER@$SERVER_HOST "rm -rf /var/www/djangoproject/*"
        
        # Copy new project files
        scp -r ./* $SERVER_USER@$SERVER_HOST:/var/www/djangoproject/
        
        # Set correct permissions
        # ssh $SERVER_USER@$SERVER_HOST "sudo chown -R $SERVER_USER:$SERVER_USER /var/www/djangoproject"
        
        # Create and activate virtual environment
        ssh $SERVER_USER@$SERVER_HOST "cd /var/www/djangoproject && python3 -m venv venv"
        
        # Install dependencies
        ssh $SERVER_USER@$SERVER_HOST "cd /var/www/djangoproject && source venv/bin/activate && pip install -r requirements.txt"
        
        # Run database migrations
        ssh $SERVER_USER@$SERVER_HOST "cd /var/www/djangoproject && source venv/bin/activate && python manage.py migrate"
        
        # Collect static files
        ssh $SERVER_USER@$SERVER_HOST "cd /var/www/djangoproject && source venv/bin/activate && python manage.py collectstatic --noinput"
        
        # Restart services
        ssh $SERVER_USER@$SERVER_HOST "sudo systemctl restart gunicorn"
        ssh $SERVER_USER@$SERVER_HOST "sudo systemctl restart nginx"
    
    - name: Post-deployment Verification
      env:
        SERVER_HOST: ${{ secrets.SERVER_HOST }}
        SERVER_USER: ${{ secrets.SERVER_USER }}
      run: |
        # Perform basic health check
        ssh $SERVER_USER@$SERVER_HOST "curl http://$SERVER_HOST:80 || exit 1"
        
        # Check service status
        ssh $SERVER_USER@$SERVER_HOST "systemctl is-active gunicorn"
        ssh $SERVER_USER@$SERVER_HOST "systemctl is-active nginx"