name: Django Deployment Workflow

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: self-hosted
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Install dependencies
      run: |
        if [ ! -d "venv" ]; then
          python3 -m venv venv
        fi
        
        # Activate virtual environment and install dependencies
        source venv/bin/activate

        python3 -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run linting
      run: |
        # pip install flake8
        # flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Run tests
      env:
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_HOST: ${{ secrets.DB_HOST }}
      run: |
        source venv/bin/activate
        python3 controlbackend/manage.py test
        rm -rf venv/*
    
    - name: Security checks - SKIPPING
      run: |
        # pip install bandit
        # bandit -r . -f custom
    
    - name: Copying to Production Server
      env:
        SERVER_HOST: ${{ secrets.SERVER_HOST }}
        SERVER_USER: ${{ secrets.SERVER_USER }}
      run: |
        # Create project directory if it doesn't exist
        # ssh $SERVER_USER@$SERVER_HOST "sudo mkdir -p /var/www/djangoproj"
        # Backup existing project (optional but recommended)
        # ssh $SERVER_USER@$SERVER_HOST "sudo cp -r /var/www/djangoproj /var/www/djangoproj_backup_$(date +%Y%m%d_%H%M%S)"
        # Copy new project files
        # scp -r ./* $SERVER_USER@$SERVER_HOST:/var/www/djangoproj/
        # Set correct permissions
        ssh $SERVER_USER@$SERVER_HOST "sudo chown -R $SERVER_USER:$SERVER_USER /var/www/djangoproj/controlback"
        # Remove existing project files
        ssh $SERVER_USER@$SERVER_HOST "rm -rf /var/www/djangoproj/*"
        
        # Copy new project files to user's home directory
        scp -r ./* $SERVER_USER@$SERVER_HOST:~/djangoproj_temp/

    - name: Deploying to Production Server
      env:
        SERVER_HOST: ${{ secrets.SERVER_HOST }}
        SERVER_USER: ${{ secrets.SERVER_USER }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_HOST: ${{ secrets.DB_HOST }}
      run: |
        # Move project files to the target directory
        ssh $SERVER_USER@$SERVER_HOST "cp -r ~/djangoproj_temp/* /var/www/djangoproj/ && rm -rf ~/djangoproj_temp"

        # Create and activate virtual environment
        ssh $SERVER_USER@$SERVER_HOST << 'EOF'
          # Create virtual environment
          cd /var/www/djangoproj
          python3 -m venv venv

          # Ensure virtual environment was created
          if [ -d "venv" ]; then
            echo "Virtual environment created successfully."
          else
            echo "Failed to create virtual environment."
            exit 1
          fi

          # Install dependencies
          source venv/bin/activate
          pip install -r requirements.txt
        EOF
        
        # Install dependencies
        # ssh $SERVER_USER@$SERVER_HOST "cd /var/www/djangoproj && source venv/bin/activate && pip install -r requirements.txt"
        
        ssh $SERVER_USER@$SERVER_HOST "cd /var/www/djangoproj/controlbackend && (
          echo 'SECRET_KEY=$SECRET_KEY'
          echo 'DB_HOST=$DB_HOST'
          echo 'DB_NAME=$DB_NAME'
          echo 'DB_USER=$DB_USER'
          echo 'DB_PASSWORD=$DB_PASSWORD'
        ) > .env"

        # Run database migrations
        ssh $SERVER_USER@$SERVER_HOST "cd /var/www/djangoproj && source venv/bin/activate && python3 controlbackend/manage.py migrate"
        
        # Collect static files
        ssh $SERVER_USER@$SERVER_HOST "cd /var/www/djangoproj && source venv/bin/activate && python3 controlbackend/manage.py collectstatic --noinput"
        
        # Restart services
        ssh $SERVER_USER@$SERVER_HOST "sudo systemctl restart gunicorn"
        ssh $SERVER_USER@$SERVER_HOST "sudo systemctl restart nginx"
    
    - name: Post-deployment Verification
      env:
        SERVER_HOST: ${{ secrets.SERVER_HOST }}
        SERVER_USER: ${{ secrets.SERVER_USER }}
      run: |
        # Check service status
        ssh $SERVER_USER@$SERVER_HOST "systemctl is-active gunicorn"
        ssh $SERVER_USER@$SERVER_HOST "systemctl is-active nginx"